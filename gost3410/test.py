import ecc
from Crypto.Util.number import *

p = 0x8000000000000000000000000000000000000000000000000000000000000431
q = 0x8000000000000000000000000000000150FE8A1892976154C59CFC193ACCF5B3
a = 7
b = 0x5FBFF498AA938CE739B8E022FBAFEF40563F6E6A3472FC2A514C0CE9DAE23B7E
xp = 2
yp = 0x8E2A8A0E65147D4BD6316030E16D19C85C97F0A9CA267122B96ABBCEA7E8FC8

d = 0x7A929ADE789BB9BE10ED359DD39A72C11B60961F49397EEE1D19CE9891EC3B28

xq = 0x7F2B49E270DB6D90D8595BEC458B50C58585BA1D4E9B788F6689DBD8E56FD80B
yq = 0x26F1B489D6701DD185C8413A977B3CBBAF64D1C593D26627DFFB101A87FF77DA

digest = long_to_bytes(0x2DFBC1B372D89A1188C09C52E0EEC61FCE52032AB1022E8E67ECE6672B043EE5)

r_test = 0x41AA28D2F1AB148280CD9ED56FEDA41974053554A42767B83AD043FD39DC0493
s_test = 0x1456C64BA4642A1653C235A98A60249BCD6D3F746B631DF928014F6C5BF9C40

pub = (xq, yq)
point = (xp, yp)


curve = ecc.EllipticCurve(p, q, a, b)

assert curve.scalar_mult(d, point) == pub

signature = curve.sign(point, d, digest, test=True)

signature_test = long_to_bytes(r_test) + long_to_bytes(s_test)

assert signature == signature_test

assert curve.verify(point, pub, digest, signature)
