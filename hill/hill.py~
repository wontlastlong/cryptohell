from itertools import permutations

def gcd(a, b):
    while b != 0:
        a, b = b, a % b
    return a


def det(m, mod):
    p = permutations(
        

class Hill:
    def __init__(self, key, mod=26):
        d = det(key, mod)
        if d == 0 or d == 13 or d % 2 == 0:
            raise ValueError('Key matrix is not suitable!')
        self.key = key
    
    def encrypt(self, s):
        